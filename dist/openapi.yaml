openapi: 3.0.0
info:
  title: Grandma's Recipes API
  description: Updated OpenAPI spec including all current endpoints.
  version: 1.1.0
servers:
  - url: http://localhost:3000/api
    description: Local dev server

paths:

  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        "201": { description: User created }
        "409": { description: Username already exists }

  /auth/login:
    post:
      tags: [Authentication]
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        "200": { description: Login success }
        "401": { description: Unauthorized }

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Log out
      responses:
        "200": { description: Logout success }

  /users/profile:
    get:
      tags: [User]
      summary: Get logged-in user's profile
      responses:
        "200": { description: User profile }
    put:
      tags: [User]
      summary: Update user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'

  /users/profile/favorites:
    get:
      tags: [Favorites]
      summary: Get favorite recipes
    post:
      tags: [Favorites]
      summary: Add recipe to favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId: { type: integer }
    delete:
      tags: [Favorites]
      summary: Remove recipe from favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId: { type: integer }

  /users/lastWatchedRecipes:
    get:
      tags: [Watched]
      summary: Get last 3 watched recipes
    post:
      tags: [Watched]
      summary: Add recipe to last watched
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId: { type: integer }

  /users/prepare-recipe/{recipeId}:
    post:
      tags: [Preparation]
      summary: Start preparing a recipe
      parameters:
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }
    get:
      tags: [Preparation]
      summary: Get preparation data
      parameters:
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }

  /users/prepare-recipe/{recipeId}/progress:
    put:
      tags: [Preparation]
      summary: Update recipe preparation step
      parameters:
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                step_number: { type: integer }

  /users/prepare-recipe/{recipeId}/servings:
    put:
      tags: [Preparation]
      summary: Scale servings
      parameters:
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                servings: { type: integer }

  /users/prepare-recipe/progress:
    delete:
      tags: [Preparation]
      summary: Clear all preparation progress

  /users/{username}/family-recipes:
    get:
      tags: [Family]
      summary: Get user's family recipes
      parameters:
        - name: username
          in: path
          required: true
          schema: { type: string }
    post:
      tags: [Family]
      summary: Add new family recipe
      parameters:
        - name: username
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFamilyRecipe'

  /recipes:
    get:
      tags: [Recipes]
      summary: Get random recipes
    post:
      tags: [Recipes]
      summary: Create a new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'

  /recipes/popular:
    get:
      tags: [Recipes]
      summary: Get popular recipes

  /recipes/trending:
    get:
      tags: [Recipes]
      summary: Get trending recipes

  /recipes/search:
    get:
      tags: [Recipes]
      summary: Search recipes
      parameters:
        - name: query
          in: query
          required: true
          schema: { type: string }

  /recipes/{recipeId}:
    get:
      tags: [Recipes]
      summary: Get recipe by ID
      parameters:
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }

  /meal-plan/plans:
    get:
      tags: [MealPlan]
      summary: Get all user meal plans
    post:
      tags: [MealPlan]
      summary: Create a new meal plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }

  /meal-plan/plans/{planId}:
    get:
      tags: [MealPlan]
      summary: Get all recipes in meal plan
      parameters:
        - name: planId
          in: path
          required: true
          schema: { type: integer }
    post:
      tags: [MealPlan]
      summary: Add recipe to plan
      parameters:
        - name: planId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe_id: { type: integer }
                day_of_week: { type: string }
                meal_type: { type: string }

  /meal-plan/plans/{planId}/{recipeId}:
    delete:
      tags: [MealPlan]
      summary: Remove recipe from plan
      parameters:
        - name: planId
          in: path
          required: true
          schema: { type: integer }
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }

  /meal-plan/plans/{planId}/{recipeId}/progress:
    put:
      tags: [MealPlan]
      summary: Update recipe progress
      parameters:
        - name: planId
          in: path
          required: true
          schema: { type: integer }
        - name: recipeId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                progress:
                  type: string
                  enum: [Not Started, In Progress, Completed]

components:
  schemas:
    RegisterUser:
      type: object
      required: [username, password, confirmPassword, firstName, lastName, country, email]
      properties:
        username: { type: string }
        password: { type: string }
        confirmPassword: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        country: { type: string }
        email: { type: string }
        profile_pic: { type: string }

    LoginUser:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }

    UserProfile:
      type: object
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string }
        country: { type: string }
        profile_pic: { type: string }

    NewRecipe:
      type: object
      required: [title, instructions]
      properties:
        title: { type: string }
        readyInMinutes: { type: integer }
        vegetarian: { type: boolean }
        vegan: { type: boolean }
        glutenFree: { type: boolean }
        servings: { type: integer }
        instructions: { type: string }
        ingredients:
          type: array
          items: { type: string }
        image: { type: string }

    NewFamilyRecipe:
      type: object
      required: [title, owner, whenToPrepare, instructions]
      properties:
        title: { type: string }
        owner: { type: string }
        whenToPrepare: { type: string }
        readyInMinutes: { type: integer }
        vegetarian: { type: boolean }
        vegan: { type: boolean }
        glutenFree: { type: boolean }
        instructions: { type: string }
        image: { type: string }
        ingredients:
          type: array
          items: { type: string }
